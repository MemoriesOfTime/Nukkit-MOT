package cn.nukkit.level.generator.object.tree;

import cn.nukkit.block.Block;
import cn.nukkit.block.BlockWood;
import cn.nukkit.level.ChunkManager;
import cn.nukkit.math.NukkitRandom;

public class ObjectBirchTree extends ObjectTree {

    public int treeHeight = 15; // Standard height for all variations

    // Define 7 different tree variations
    private static final double[][][][] TREE_VARIATIONS = {
            // Variation 0 (original)
            {
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 17.2, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 17.2, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 17.2, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 18.2, 0.0, 0.0, 0.0 },
                            { 0.0, 18.2, 0.0, 0.0, 18.14, 17.2, 0.0, 0.0 },
                            { 0.0, 18.2, 18.10, 0.0, 18.2, 0.0, 18.2, 0.0 },
                            { 0.0, 17.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 18.10, 18.14, 18.14, 0.0, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 18.14, 0.0, 18.14, 18.14, 18.2 },
                            { 0.0, 18.2, 18.2, 18.2, 18.14, 17.2, 18.14, 0.0 },
                            { 18.14, 18.14, 18.14, 18.14, 18.2, 18.14, 18.14, 0.0 },
                            { 18.14, 18.14, 18.14, 18.2, 0.0, 18.14, 18.10, 0.0 },
                            { 0.0, 18.14, 18.14, 0.0, 0.0, 18.2, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 18.2, 18.14, 18.2, 0.0, 0.0, 0.0 },
                            { 0.0, 18.2, 18.14, 18.14, 18.14, 18.14, 0.0, 0.0 },
                            { 0.0, 18.10, 18.2, 18.14, 18.14, 18.14, 18.14, 0.0 },
                            { 18.2, 18.14, 18.10, 18.14, 18.14, 18.14, 18.14, 18.14 },
                            { 18.14, 18.14, 18.2, 18.14, 18.14, 18.14, 18.14, 0.0 },
                            { 18.14, 18.14, 18.2, 18.14, 18.2, 18.14, 18.10, 0.0 },
                            { 18.14, 18.14, 18.14, 18.2, 18.10, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 18.14, 18.14, 18.14, 18.14, 0.0 },
                            { 0.0, 0.0, 18.2, 18.14, 18.14, 18.14, 18.14, 18.14 },
                            { 0.0, 18.10, 18.2, 18.14, 18.14, 18.14, 18.14, 18.14 },
                            { 0.0, 18.2, 18.10, 18.14, 18.14, 18.14, 18.14, 18.14 },
                            { 18.14, 18.14, 18.2, 18.14, 18.14, 18.14, 0.0, 0.0 },
                            { 0.0, 18.14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 18.14, 0.0, 18.14, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 18.14, 18.14, 18.14, 0.0 },
                            { 0.0, 0.0, 18.14, 18.14, 18.14, 18.14, 18.14, 18.14 },
                            { 0.0, 0.0, 0.0, 18.14, 18.14, 18.14, 0.0, 0.0 },
                            { 0.0, 18.14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 18.14, 18.14, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 18.2, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    }
            },
            // Variation 1 (smaller, more compact)
            {
                    // Layers 0-3: trunk only
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 17.2, 17.2, 17.2, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 17.2, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 574.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 574.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.6, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 17.2, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 18.2, 0.0, 0.0 },
                            { 0.0, 18.2, 18.2, 17.2, 18.2, 0.0 },
                            { 0.0, 18.2, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 18.2, 18.2, 18.2, 18.2, 18.2 },
                            { 0.0, 18.10, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 18.10, 18.2, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 18.2, 18.2, 18.2, 18.2, 18.2 },
                            { 18.2, 18.2, 18.2, 18.2, 18.2, 18.2 },
                            { 0.0, 18.2, 18.2, 18.2, 18.2, 18.2 },
                            { 0.0, 18.2, 18.2, 18.6, 18.2, 0.0 },
                            { 0.0, 0.0, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 18.2, 18.2, 18.2, 18.6, 18.2 },
                            { 0.0, 0.0, 18.2, 18.2, 18.6, 0.0 },
                            { 0.0, 0.0, 18.2, 18.6, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 18.6, 0.0 },
                            { 0.0, 0.0, 18.2, 18.6, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    }
            },
            // Variation 2 (taller, thinner)
            {
                    // Trunk layers
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 17.2, 17.2, 17.2, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 574.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 574.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 17.2, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 18.6, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 18.2, 0.0, 0.0 },
                            { 0.0, 18.2, 18.2, 17.2, 18.2, 0.0 },
                            { 0.0, 18.2, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 18.2, 18.2, 18.2, 18.2, 18.2 },
                            { 0.0, 18.6, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 18.10, 18.2, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 18.2, 18.2, 18.10, 0.0 },
                            { 0.0, 18.2, 18.2, 18.2, 18.2, 18.10 },
                            { 18.6, 18.2, 18.6, 18.2, 18.2, 18.2 },
                            { 0.0, 18.2, 18.2, 18.6, 18.2, 18.6 },
                            { 0.0, 18.2, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 18.2, 18.2, 18.2, 18.2, 18.2 },
                            { 0.0, 0.0, 18.2, 18.2, 18.6, 0.0 },
                            { 0.0, 0.0, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    }
            },
            // Variation 3 (wide canopy)
            {
                    // Trunk
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 574.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 574.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 590.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 17.2, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 18.10, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 18.2, 0.0, 0.0 },
                            { 0.0, 18.2, 18.2, 17.2, 18.2, 0.0 },
                            { 0.0, 18.2, 18.2, 18.6, 18.2, 0.0 },
                            { 0.0, 18.2, 18.2, 18.2, 18.2, 18.2 },
                            { 0.0, 18.2, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 18.2, 18.2, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 18.10, 18.2, 18.2, 18.2, 18.2 },
                            { 18.10, 18.2, 18.2, 18.2, 18.2, 18.6 },
                            { 0.0, 18.2, 18.2, 18.6, 18.2, 18.6 },
                            { 0.0, 18.2, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 18.6, 18.2, 0.0 },
                            { 0.0, 18.2, 18.2, 18.2, 18.2, 18.2 },
                            { 0.0, 0.0, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 18.2, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 18.10, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    }
            },
            // Variation 4 (asymmetrical)
            {
                    // Trunk
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 18.14, 0.0, 0.0 },
                            { 0.0, 18.14, 17.2, 18.14, 0.0 },
                            { 0.0, 0.0, 18.14, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 18.14, 18.14, 18.14, 0.0 },
                            { 18.14, 18.14, 18.14, 18.14, 18.14 },
                            { 18.14, 18.14, 18.14, 18.14, 18.14 },
                            { 18.14, 18.14, 18.14, 18.14, 18.14 },
                            { 0.0, 18.14, 18.14, 18.14, 0.0 }
                    },
                    {
                            { 0.0, 18.14, 18.14, 18.14, 0.0 },
                            { 18.2, 18.14, 18.14, 18.14, 18.14 },
                            { 18.14, 18.14, 18.14, 18.14, 18.2 },
                            { 18.2, 18.14, 18.2, 18.2, 18.2 },
                            { 0.0, 18.10, 18.2, 18.2, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 18.14, 18.2, 18.2, 0.0 },
                            { 18.10, 18.14, 18.14, 18.2, 18.2 },
                            { 0.0, 18.14, 18.2, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 18.2, 18.14, 18.14, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0 }
                    }
            },
            // Variation 5 (sparse leaves)
            {
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 18.10, 0.0, 0.0, 18.2, 0.0, 0.0 },
                            { 0.0, 18.2, 17.2, 18.2, 18.2, 17.2, 18.2, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 18.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 18.14, 18.14, 18.2, 18.2, 18.2, 18.14, 0.0 },
                            { 18.14, 18.14, 18.14, 18.2, 18.2, 18.2, 18.14, 18.14 },
                            { 18.14, 18.14, 18.2, 18.2, 18.2, 18.2, 18.14, 0.0 },
                            { 0.0, 0.0, 18.2, 0.0, 18.2, 18.10, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 18.10, 18.2, 0.0, 18.2, 0.0, 0.0 },
                            { 18.2, 18.14, 18.14, 18.2, 18.2, 18.2, 18.14, 18.2 },
                            { 0.0, 18.14, 18.14, 18.2, 18.2, 18.2, 18.14, 0.0 },
                            { 0.0, 18.14, 18.2, 18.2, 18.2, 18.2, 18.14, 18.14 },
                            { 0.0, 0.0, 18.14, 18.14, 18.14, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 18.14, 18.10, 18.2, 18.2, 0.0, 0.0 },
                            { 0.0, 18.14, 18.14, 18.14, 18.14, 18.14, 18.14, 0.0 },
                            { 0.0, 0.0, 18.14, 18.14, 18.14, 18.14, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 18.2, 18.14, 18.14, 18.14, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    }
            },
            // Variation 6 (bushy bottom)
            {
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.14, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 17.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 17.2, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 17.2, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 18.2, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 18.14, 17.2, 18.14, 0.0, 0.0 },
                            { 0.0, 18.2, 18.14, 18.14, 0.0, 0.0, 0.0 },
                            { 0.0, 18.14, 0.0, 18.14, 18.14, 18.14, 0.0 },
                            { 18.2, 17.2, 18.14, 18.14, 0.0, 18.14, 0.0 },
                            { 0.0, 18.14, 18.14, 0.0, 0.0, 18.14, 18.14 },
                            { 0.0, 0.0, 0.0, 18.14, 18.14, 17.2, 18.14 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 18.14, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 18.14, 18.14, 18.14, 0.0, 0.0 },
                            { 0.0, 0.0, 18.14, 18.14, 18.14, 0.0, 0.0 },
                            { 0.0, 18.2, 18.14, 18.14, 18.2, 18.2, 0.0 },
                            { 0.0, 18.14, 18.14, 18.14, 18.14, 18.14, 0.0 },
                            { 18.10, 18.14, 18.14, 18.2, 18.2, 18.14, 18.14 },
                            { 0.0, 18.14, 18.2, 18.2, 18.2, 18.14, 18.14 },
                            { 0.0, 18.14, 18.14, 18.14, 18.14, 18.14, 18.14 },
                            { 0.0, 0.0, 0.0, 0.0, 18.2, 18.14, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 18.14, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.14, 18.14, 0.0, 0.0 },
                            { 0.0, 0.0, 18.14, 18.14, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 18.14, 18.14, 18.14, 18.14, 0.0 },
                            { 0.0, 18.14, 18.14, 18.14, 18.14, 18.14, 18.14 },
                            { 0.0, 18.14, 18.14, 18.14, 18.2, 18.14, 18.14 },
                            { 0.0, 0.0, 18.14, 18.14, 18.14, 18.14, 18.14 },
                            { 0.0, 0.0, 0.0, 18.2, 18.14, 0.0, 0.0 }
                    },
                    {
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.14, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                            { 0.0, 0.0, 0.0, 18.14, 18.14, 0.0, 0.0 },
                            { 0.0, 18.14, 18.14, 18.14, 18.14, 18.14, 18.14 },
                            { 0.0, 0.0, 0.0, 18.14, 18.14, 18.14, 0.0 },
                            { 0.0, 0.0, 18.14, 18.14, 18.14, 18.14, 0.0 },
                            { 0.0, 0.0, 0.0, 0.0, 18.14, 0.0, 0.0 }
                    }
            }
    };

    @Override
    public int getType() {
        return BlockWood.BIRCH;
    }

    @Override
    public int getTreeHeight() {
        return this.treeHeight;
    }

    @Override
    public void placeObject(ChunkManager level, int x, int y, int z, NukkitRandom random) {
        int variation = random.nextBoundedInt(7);
        double[][][] selectedTree = TREE_VARIATIONS[variation];

        // Place dirt block under the tree (only replace if air or replaceable)
        if (canReplace(level.getBlockIdAt(x, y - 1, z))) {
            level.setBlockAt(x, y - 1, z, Block.DIRT);
        }

        // Find the trunk position (17.2) in the tree structure
        int[] trunkPos = findTrunkPosition(selectedTree);

        int trunkLayer = 0;
        int trunkRow = 0;
        int trunkCol = 0;

        if (trunkPos != null) {
            trunkLayer = trunkPos[0];
            trunkRow = trunkPos[1];
            trunkCol = trunkPos[2];
        } else {
            // Fallback - use center of bottom layer
            trunkLayer = 0;
            trunkRow = selectedTree[0].length / 2;
            trunkCol = selectedTree[0][0].length / 2;
        }

        // Place the tree with the trunk at (x,y,z)
        for (int layer = 0; layer < selectedTree.length; layer++) {
            double[][] currentLayer = selectedTree[layer];
            for (int row = 0; row < currentLayer.length; row++) {
                for (int col = 0; col < currentLayer[row].length; col++) {
                    double blockType = currentLayer[row][col];
                    if (blockType > 0) {
                        // Calculate position relative to the trunk
                        int blockX = x + (col - trunkCol);
                        int blockZ = z + (row - trunkRow);
                        int blockY = y + (layer - trunkLayer);

                        placeBlockIfReplaceable(level, blockX, blockY, blockZ, blockType);
                    }
                }
            }
        }
    }

    private int[] findTrunkPosition(double[][][] tree) {
        // First try to find a single trunk
        for (int layer = 0; layer < tree.length; layer++) {
            double[][] currentLayer = tree[layer];
            for (int row = 0; row < currentLayer.length; row++) {
                for (int col = 0; col < currentLayer[row].length; col++) {
                    if (currentLayer[row][col] == 17.2) {
                        // Check if this is the only trunk in this layer
                        boolean multipleTrunks = false;
                        for (int checkRow = 0; checkRow < currentLayer.length; checkRow++) {
                            for (int checkCol = 0; checkCol < currentLayer[checkRow].length; checkCol++) {
                                if ((checkRow != row || checkCol != col) && currentLayer[checkRow][checkCol] == 17.2) {
                                    multipleTrunks = true;
                                    break;
                                }
                            }
                            if (multipleTrunks) break;
                        }

                        if (!multipleTrunks) {
                            return new int[]{layer, row, col};
                        }
                    }
                }
            }
        }

        // If we get here, there are multiple trunks - find the center one
        for (int layer = 0; layer < tree.length; layer++) {
            double[][] currentLayer = tree[layer];
            int centerRow = currentLayer.length / 2;
            int centerCol = currentLayer[0].length / 2;

            // Find the trunk closest to center
            int closestRow = -1;
            int closestCol = -1;
            double minDistance = Double.MAX_VALUE;

            for (int row = 0; row < currentLayer.length; row++) {
                for (int col = 0; col < currentLayer[row].length; col++) {
                    if (currentLayer[row][col] == 17.2) {
                        double distance = Math.sqrt(Math.pow(row - centerRow, 2) + Math.pow(col - centerCol, 2));
                        if (distance < minDistance) {
                            minDistance = distance;
                            closestRow = row;
                            closestCol = col;
                        }
                    }
                }
            }

            if (closestRow != -1) {
                return new int[]{layer, closestRow, closestCol};
            }
        }

        return null;
    }

    private void placeSimpleTree(ChunkManager level, int x, int y, int z, double[][][] tree) {
        // Fallback method if trunk position couldn't be found
        for (int layer = 0; layer < tree.length; layer++) {
            double[][] currentLayer = tree[layer];
            for (int row = 0; row < currentLayer.length; row++) {
                for (int col = 0; col < currentLayer[row].length; col++) {
                    double blockType = currentLayer[row][col];
                    if (blockType > 0) {
                        int blockX = x + col - (currentLayer[0].length / 2);
                        int blockZ = z + row - (currentLayer.length / 2);
                        int blockY = y + layer;

                        placeBlockIfReplaceable(level, blockX, blockY, blockZ, blockType);
                    }
                }
            }
        }
    }

    private void placeBlockIfReplaceable(ChunkManager level, int x, int y, int z, double blockType) {
        if (!canReplace(level.getBlockIdAt(x, y, z))) {
            return;
        }

        if (blockType == 17.2) {  // Trunk
            level.setBlockAt(x, y, z, this.getTrunkBlock(), this.getType());
        } else if (blockType >= 18.0 && blockType <= 18.9) {  // Leaves
            level.setBlockAt(x, y, z, this.getLeafBlock(), this.getType());
        }
    }

    private boolean canReplace(int blockId) {
        return blockId == Block.AIR ||
                blockId == Block.TALL_GRASS ||
                blockId == Block.DANDELION ||
                blockId == Block.POPPY ||
                blockId == Block.SAPLING ||
                blockId == Block.SNOW_LAYER;
    }
}